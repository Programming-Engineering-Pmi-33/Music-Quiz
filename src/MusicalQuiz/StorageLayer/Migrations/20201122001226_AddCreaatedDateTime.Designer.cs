// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StorageLayer;

namespace StorageLayer.Migrations
{
    [DbContext(typeof(MusicalQuizDbContext))]
    [Migration("20201122001226_AddCreaatedDateTime")]
    partial class AddCreaatedDateTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("StorageLayer.Models.Genre", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("StorageLayer.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnswerTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GenreId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PlayTime")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("StorageLayer.Models.QuizSong", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.HasKey("QuizId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("QuizzesSongs");
                });

            modelBuilder.Entity("StorageLayer.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("QuizId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("StorageLayer.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("StorageLayer.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("AppRating")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StorageLayer.Models.Quiz", b =>
                {
                    b.HasOne("StorageLayer.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("StorageLayer.Models.User", "OwnerUser")
                        .WithMany("Quizzes")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StorageLayer.Models.QuizSong", b =>
                {
                    b.HasOne("StorageLayer.Models.Quiz", "Quiz")
                        .WithMany("QuizSongs")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageLayer.Models.Song", "Song")
                        .WithMany("QuizSong")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StorageLayer.Models.Score", b =>
                {
                    b.HasOne("StorageLayer.Models.User", "OwnerUser")
                        .WithMany("Scores")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageLayer.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
